openapi: 3.0.0
info:
  version: 1.0.0
  title: Code Generation
  description: Bank API for code generation at university of applied science inholland
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/group5.inholland.codegeneration/BankAPI/1.0.0
    
security:
  - bearerAuth: [] 
  
paths:
  /transaction:
    description: Transaction related API endpoints
    get:
      tags:
       - Transactions
      description: Get all current transactions
      parameters: 
        - in: query
          name: offset
          schema:
            type: integer
          description: The number of items to skip before starting to collect the query results
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of transactions to return
      responses: 
        '200':
          description: Transaction created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transaction'
        '400':
          description: Invalid input
        '403':
          description: Forbidden, you do not have access rights
        '404':
          description: Not found
        '500':
          description: Oops, something went wrong on the server.
        '409':
          description: Conflict
              
    post:
      tags:
       - Transactions
      description: Create a transaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/transaction'
      responses:
        '201':
          description: Transaction Created
          content:
            application/json:
             schema:
               $ref: '#/components/schemas/transaction'
        '400':
          description: Invalid input
        '403':
          description: Forbidden, you do not have access rights
        '404':
          description: Not found
        '500':
          description: Oops, something went wrong on the server.
        '409':
          description: Conflict
          
  /transactions/{transactionId}:
    description: Get all transactions based on Transaction ID
    get:
      tags:
       - Transactions
      parameters: 
       - in: path
         name: transactionId
         required: true
         schema:
           type: integer
           example: 2020
           description: id of a transaction
      responses:
        '200':
          description: Successfully received the transactions of transactionId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transaction'
        '400':
          description: Invalid input
        '403':
          description: Forbidden, you do not have access rights
        '404':
          description: Not found
        '500':
          description: Oops, something went wrong on the server.
        '409':
          description: Conflict
    delete:
     tags:
       - Transactions
     parameters: 
      - in: path
        name: transactionId
        required: true
        schema:
          type: integer
          example: 2010
          description: Id of the transaction
     responses:
        '200':
         description: Successfully deleted.
        '400':
          description: Invalid input
        '403':
          description: Forbidden, you do not have access rights
        '404':
          description: Not found
        '500':
          description: Oops, something went wrong on the server.
        '409':
          description: Conflict
                

    put:
       tags:
        - Transactions
       parameters: 
       - in: path
         name: transactionId
         required: true
         schema:
           type: integer
           example: 2010
           description: Id of the transaction
       requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/transaction'
       responses:
         '200':
           description: Transaction modified.
         '400':
           description: Invalid input
         '403':
           description: Forbidden, you do not have access rights
         '404':
           description: Not found
         '500':
           description: Oops, something went wrong on the server.
         '409':
           description: Conflict
  /users:
      get:
        tags:
          - Employee
        summary: returns a list of users
        operationId: getUsers
        description: Returns a list of users
        parameters: 
          - in: query
            name: offset
            schema:
              type: integer
              description: The number of items to skip before starting to collect the result set
          - in: query
            name: limit
            schema:
              type: integer
              description: The number of items to return
        responses:
          '200':
            description: successfully fetched the list of users
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
          '400':
            description: Invalid input
          '401':
            description: Access token is missing or invalid
          '404':
            description: Forbidden, you do not have the required rights
      post:
        tags:
          - Employee
        summary: Creates a new user
        operationId: createUser
        description: Creates a new user, if the logged in user is an employee, and returns the userId
        requestBody:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User registered
          required: true
        responses:
          '200':
            description: User registered
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/User'
          '400': 
            description: Invalid input
          '404':
            description: Forbidden, you do not have the required rights
  /users/{userId}:
    parameters:
      - in: path
        name: userId
        description: User id to get from the database
        required: true
        schema:
          type: integer
          format: int64
          minimum: 1
    get:
      tags:
        - Employee
      summary: Finds a user by id
      operationId: getUserById
      description: Returns a user with the specified id
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Bad request. User ID must be an integer and larger than 0
        '403':
          description: A user with the specified ID was not found.
        '404':
          description: Forbidden, you do not have the required rights 
        '500':
          description: Unexpected error.
    delete:
      tags:
        - Employee
      summary: Delete registered user by id
      operationId: deleteUser
      description: Deletes a user with the specified id
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Invalid user id
        '404':
          description: A user with the specified ID was not found.
        '500':
          description: Unexpected error.  
  /login:
    post:
      tags:
        - Login
      summary: Get authorization token
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: username@gmail.com          
                password:
                  type: string
                  example: password
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: 12435-3435465
        '400':
          description: Invalid input
        '401':
          description: Unauthorized  
  /account/{userId}:
    get:
      tags: 
      - Accounts
      summary: get account by id
      description: get account by id
      operationId: getAccountById
      parameters: 
      - name: userId
        in: path
        description: the id of the user who owns the account
        required: true
        schema:
          type: integer
      - in: query
        name: status
        required: true
        schema:
          type: string
          enum: 
          - active
          - closed
      responses:
        '200':
          description: 'success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
    put:
      tags: 
      - Accounts
      summary: edit existed account
      description: get the account by id to edit the info of the account
      operationId: editAccountById
      parameters: 
      - in: path
        name: userId
        description: the id of the account you want to edit
        required: true
        schema:
          type: integer
      requestBody:
        description: description of the body of the account to be edited
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        200:
          description: 'success'
  /account:
    post:
      tags: 
      - Accounts
      summary: Creates an account
      description: Creates an account for a normal user
      operationId: createAccount
      requestBody:
        description: description of the body of the account to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        200:
          description: 'success'
        400:
          description: 'account was not found'
        5XX:
          description: 'unexpected error'
  /account/{status}/{userId}:
    get:
      tags: 
      - Accounts
      summary: get status
      description: get status of a specific account
      operationId: getAccountStatus
      parameters: 
      - in: path
        name: status
        required: true
        schema:
          type: string
          enum: 
          - active
          - closed
      - in: path
        name: userId
        required: true
        schema:
          type: integer
      responses:
        200:
          description: 'successful'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        400:
          description: 'account was not found'
        5XX:
          description: 'unexpected error'
  /account/{type}/{userId}:
    get:
      tags: 
      - Accounts
      summary: account type
      description: get the type of the account (either current or savings)
      operationId: getAccountType
      parameters: 
      - in: path
        name: type
        required: true
        schema:
          type: string
          enum: 
          - current
          - savings
      - in: path
        name: userId
        required: true
        schema:
          type: integer
      responses:
        200:
          description: 'success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        400:
          description: 'account was not found'
        5XX:
          description: 'unexpected error'
components:
  securitySchemes:
      bearerAuth: # arbitrary name for the security scheme
        type: http
        scheme: bearer
        bearerFormat: JWT
        description: JWT token authentication
  schemas:
    Account:
      type: object
      required: 
      - IBAN
      - userId
      - type
      - status
      - balance
      properties:
        IBAN:
          type: string
        userId:
          type: integer
        type:
          type: string
          enum: 
          - current
          - savings
        status:
          type: string
          enum:
          - active
          - closed
        balance:
          type: number
        token:
          type: string
    transaction:
      type: object
      properties:
        transactionId:
          type: integer
          example: 2012
        dateTimeCreated:
          format: date-time
          type: string
          description: the date and time the transaction was created
          example: 02.05.2021 18:36
        senderIBAN:
          type: string
          example: NL23RABO2298608059
        receiverIBAN:
          type: string
          example: NL67ABNA8265634552
        senderUserId:
          type: integer
          example: 20939
        amount:
         type: number
         format: double
         example: 4800
        currencyType: #not sure about adding this because as a requirement we have accounts should be EUR accounts. So by default it can be EUR but should we have options? 
          type: string
          example: EUR
    User:
      type: object
      required: 
        - id
        - firstName
        - lastName
        - email
        - password
        - phoneNumber
        - creationDate
        - role
      properties:
        id:
          type: integer
          example: 1
        firstName:
          type: string
          example: john
        lastName:
          type: string
          example: winchester
        email:
            type: string
            example: john@gmail.com
        password:
          type: string
          example: whatever
        phoneNumber:
          type: string
          example: 090078601
        creationDate:
          type: string
          format: date-time
          example: 12-12-12 12:00:00
        role:
          type: string
          enum: 
          - employee
          - customer